server:
  port: 8080
  servlet:
    context-path: /shardingJdbc31
  tomcat:
    max-threads: 10
# inline 方式实现水平分库分表 分库不行，但分表可以
logging:
  level:
    com.systeminfos.shardingJdbc31: debug
    io.shardingjdbc.core: debug

#在 Sharding-JDBC 3.1.0.M1 中，algorithmExpression 仅支持基本的字符串拼接和简单表达式，不支持复杂条件表达式。例如 db-${user_id % 3 == 0 ? 'master' : (user_id % 3 == 1 ? 'slaver1' : 'slaver2')} 这样的嵌套三元表达式可能会导致解析问题。
#  为了绕过此限制，可以采取以下方案：
#  1.	直接将数据源名称简化为数值映射：根据 user_id 的取模结果，直接映射到对应的数据源。
#  2.	在算法表达式中只使用模运算并去掉三元表达式：可以通过更简单的 algorithmExpression 映射来实现需求。
#  简化 algorithmExpression 的 YAML 配置
#  可以将数据库命名为 db_0、db_1、db_2，分别对应 db-master、db-slaver1 和 db-slaver2。然后，通过 user_id % 3 直接选择数据库。


# 所有数据源列表
sharding:
  jdbc:
    dataSource:
      names: db-0,db-1,db-2
      db-0: # 配置主库
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardingjdbc_0?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
        username: root
        password: mysqlmysql
        maxPoolSize: 10 #最大连接数
      db-1: # 配置第一个从库
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardingjdbc_1?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false&serverTimezone=GMT
        username: root
        password: mysqlmysql
        maxPoolSize: 10
      db-2: # 配置第二个从库
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardingjdbc_2?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false&serverTimezone=GMT
        username: root
        password: mysqlmysql
        maxPoolSize: 10
    config:
      sharding:
        tables: # 分表配置
          user_info:
            actual-data-nodes: dbs.user_info_$->{0..1} #实际表名user_info_0, user_info_1
            table-strategy: # 配置分表策略
              inline:
                sharding-column: user_id # 根据id来区分(id值必须存在)
                algorithm-expression: user_info_${user_id % 2} # 配置数据分表的策略的类
            database-strategy: # 配置分库策略
              inline:
                sharding-column: user_id # 根据id来区分(id值必须存在)
                algorithmExpression: "db-${user_id % 3}"
        master-slave-rules: # 配置读写分离
          dbs:
            load-balance-algorithm-type: round_robin # 配置从库选择策略，提供轮询与随机，这里选择用轮询//random 随机 //round_robin 轮询
            master-data-source-name: db-0
            slave-data-source-names: db-1,db-2
      props:
        sql: true # 开启SQL显示，默认值: false，注意：仅配置读写分离时不会打印日志

# MyBatis配置
mybatis:
  type-aliases-package: com.systeminfos.shardingJdbc31.model
  mapper-locations: classpath:mapper/*.xml
  configuration:
    cache-enabled: false

spring:
  main:
    allow-bean-definition-overriding: true # 由于shading-jdbc也会创建bean=Datasource，必须开启覆盖
    


